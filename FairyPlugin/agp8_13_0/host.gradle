import org.gradle.api.internal.artifacts.DefaultProjectComponentIdentifier
import org.xml.sax.Attributes
import org.xml.sax.SAXException
import org.xml.sax.helpers.DefaultHandler

import javax.xml.parsers.ParserConfigurationException
import javax.xml.parsers.SAXParser
import javax.xml.parsers.SAXParserFactory
import java.util.jar.JarEntry
import java.util.jar.JarOutputStream
import java.util.regex.Pattern
import java.util.zip.CRC32
import java.util.zip.CheckedOutputStream
import java.util.zip.ZipEntry
import java.util.zip.ZipFile
import java.util.zip.ZipInputStream
import java.util.zip.ZipOutputStream

configurations {
    innerPlugin
}

def innerPluginApkList = []

class FaiyExt {
    //可选配置，用于指定插件进程名。
    //不设置即使用默认的独立进程(:plugin)
    //设置为空串或者null即是和宿主同进程
    private String pluginProcess = ":plugin"

    //指定当前宿主版本与哪些历史宿主版本兼容, 用于指定插件版本跨宿主版本。默认是自己与自己兼容，也即插件不能跨宿主版本
    //例如：
    // 宿主版本v1，插件版本v1.1, v1.2
    // 宿主版本v2，插件版本v2.1, v2.1
    // 默认插件不能跨宿主版本，也就是说插件版本v1.1, v1.2只能在宿主版本v1上运行，而插件版本v2.1, v2.2只能在宿主版本v2上运行
    //若在发布宿主版本v2时，同时指定这个版本与宿主v1版本兼容，则插件版本v1.1, v1.2也可以在宿主版本v2上运行
    //此功能请谨慎使用，否则可能引起插件崩溃
    private String compatibleWithHostVersion = null

    //根据宿主的依赖树，生成需要在插件中排除的包配置(插件编译时依赖此配)
    //避免插件和宿主同时包含同一个依赖
    private List<String> modulesShouldBeKept = null

    public String getPluginProcess() {
        return pluginProcess
    }

    public void setPluginProcess(String process) {
        this.pluginProcess = process
    }

    public String getCompatibleWithHostVersion() {
        return compatibleWithHostVersion
    }

    public void setCompatibleWithHostVersion(String compatibleVersion) {
        this.compatibleWithHostVersion = compatibleVersion
    }

    public boolean shouldBeKept(String moduleIdentifier) {
        initDefaultList();
        for(String module : modulesShouldBeKept) {
            if (moduleIdentifier.startsWith(module)) {
                return true;
            }
        }
        return false;
    }

    public void setModulesShouldBeKept(List<String> modules) {
        initDefaultList();
        this.modulesShouldBeKept.addAll(modules)
    }

    private void initDefaultList() {
        if (modulesShouldBeKept == null) {
            modulesShouldBeKept = new ArrayList<>()
            //允许插件和宿主同时依赖kotlin基础库代码 否则插件kotlin编译会失败
            //插件和宿主同时依赖kotlin基础库在运行时不会造成问题，因为kotlin基础库不包含资源
            modulesShouldBeKept.add("org.jetbrains.kotlin:kotlin-stdlib");
            modulesShouldBeKept.add("org.jetbrains:annotations");
            modulesShouldBeKept.add("androidx.annotation:annotation")
        }
    }
}
extensions.create('fairy', FaiyExt)

//generateSourcess时借此文件生成attrs.xml
android.androidResources.additionalParameters(
        '--emit-ids', getLayout().getBuildDirectory().getAsFile().get().absolutePath + "/outputs/generated_exported_all_resouces.properties",
        '--stable-ids', getLayout().getBuildDirectory().getAsFile().get().absolutePath + "/outputs/public_ids.properties")

afterEvaluate {

    if (android.defaultConfig.applicationId == null) {
        throw new Exception("宿主build.gradle未配置android.defaultConfig.applicationId")
    }

    //收集需要内置的插件文件地址
    configurations.innerPlugin.files.each { file ->
        innerPluginApkList << file.absolutePath
    }

    for (variant in android.applicationVariants) {

        def varName = variant.name;
        def buildTypeName = variant.buildType.name
        def flavorName = variant.flavorName
        def varDirName =  variant.dirName
        def rtConfig = variant.runtimeConfiguration

        println 'Check Env : variant=' + varName +  ", buildTypeName=" + buildTypeName + ", flavorName=" + flavorName + ", varDirName=" + varDirName

        variant.getPreBuildProvider().configure {
            it.doLast {
                if (rtConfig.isCanBeResolved() && rtConfig.getResolutionAlternatives() == null) {
                    TreeSet hashSet = new TreeSet()
                    rtConfig.getIncoming().getResolutionResult().getRoot().getDependencies().each() { dependencyResult->
                        if (dependencyResult instanceof ResolvedDependencyResult) {
                            add(hashSet, dependencyResult, false)
                        }
                    }
                    File dependenciesScript = new File("${project.buildDir}/outputs/host_dependencies.gradle")
                    dependenciesScript.getParentFile().mkdirs()
                    dependenciesScript.write("// This file is automatically generated by Host Script\n")
                    dependenciesScript.append("// variant is ${varName}\n")
                    dependenciesScript.append("configurations {\n")
                    hashSet.each { moduleFullName->
                        dependenciesScript.append(moduleFullName + "\n")
                    }
                    dependenciesScript.append("}\n")
                }
            }
        }

        variant.getMergeResourcesProvider().configure {
            it.doLast {
                println '生成一份主题patch包，编译非独立插件时需要此包'

                File patchDir = new File(getLayout().getBuildDirectory().getAsFile().get().absolutePath, "outputs/theme_patch/" + varDirName);
                patchDir.mkdirs();

                //导出一份主题包备用，编译非独立插件时需要
                createThemePatch(varName, buildTypeName, patchDir);
            }
        }

        variant.getMergeAssetsProvider().configure {
            it.setOnlyIf { true }
            it.outputs.upToDateWhen { false }
            it.doLast {

                //检查内置插件坐标是否存在，不存在给出提示
                innerPluginApkList.each { innerAPK ->
                    if (!file(innerAPK).exists()) {
                        println "引用的插件apk文件不存在，可能插件apk还未编译完成，或者宿主innerPlugin配置的路径错误：" + innerAPK
                    }
                }

                copy {
                    println '复制宿主依赖的内置插件到merge后的assets目录\n' + innerPluginApkList + "\n" + outputDir.orNull
                    from files(innerPluginApkList)
                    into(outputDir)
                }
            }
        }

        tasks.findByName("process${varName.capitalize()}Manifest").doLast {
            fileTree(multiApkManifestOutputDirectory).include("**/AndroidManifest.xml").each { manifestFile->
                println '正在检查Manifest中的插件配置是否正确' + manifestFile.absolutePath

                def originManifestContent = manifestFile.getText('UTF-8')
                if (originManifestContent.contains("{applicationId}")) {
                    throw new Exception("宿主build.gradle未配置android.defaultConfig.applicationId")
                }

                //生成prop文件
                def pattern = Pattern.compile("versionName\\s*=\\s*\"(.+?)\"");
                def matcher = pattern.matcher(originManifestContent);
                if (matcher.find()) {
                    def versionName = matcher.group(1)
                    //File hostInfo = new File("${project.buildDir}/outputs/HostInfo-" + tastName.replace("process","").replace("Resources", "") + ".prop")
                    println 'HostInfo.prop没有单独命名，有多个favor时文件会生成多个并覆盖，如果不同favor间版本号不同会导致基线包信息生成错误！！'
                    File hostInfo = new File("${getLayout().getBuildDirectory().getAsFile().get()}/outputs/HostInfo.prop")
                    if (hostInfo.exists()) {
                        hostInfo.delete()
                    }
                    //没有单独命名，有多个abi时文件会覆盖
                    println '正在生成文件' + hostInfo.absolutePath
                    hostInfo.write("#Host Manifest CREATED AT " + new Date().format("yyyy-MM-dd HH:mm::ss"))
                    hostInfo.append("\nhost.versionCode=" + android.defaultConfig.versionCode)
                    //versionName可能有后缀，所以以Manifest中为准
                    hostInfo.append("\nhost.versionName=" + versionName)
                    hostInfo.append("\nhost.buildType=" + buildTypeName)
                    hostInfo.append("\nhost.flavorName=" + flavorName)
                    hostInfo.append("\nhost.varName=" + varName)
                    hostInfo.append("\nhost.varDirName=" + varDirName)
                    hostInfo.append("\nhost.minifyEnabled=" + variant.buildType.minifyEnabled)
                    def packageName = android.defaultConfig.applicationId
                    if (android.buildTypes[buildTypeName].applicationIdSuffix != null) {
                        packageName = packageName + android.buildTypes[buildTypeName].applicationIdSuffix;
                    }

                    hostInfo.append("\nhost.applicationId=" + packageName)
                }

                //指定插件进程名，设置为空串或者null即是和宿主同进程
                //不设置即使用默认进程(:plugin)
                def pluginProcessName = fairy.pluginProcess
                if (!":plugin".equals(pluginProcessName)) {
                    def customPluginProcessName = "";
                    if (pluginProcessName != null) {
                        customPluginProcessName = "android:process=\"" + pluginProcessName + "\""
                    }
                    println '正在设置插件进程配置：' + customPluginProcessName
                    def modifyedManifestContent = originManifestContent.replaceAll("android:process=\":plugin\"", customPluginProcessName)
                    manifestFile.write(modifyedManifestContent, 'UTF-8')
                }

                //指定当前宿主版本与哪些历史宿主版本兼容, 用于指定插件版本跨宿主版本。默认是自己与自己兼容，也即插件不能跨宿主版本
                //例如：
                // 宿主版本v1，插件版本v1.1, v1.2
                // 宿主版本v2，插件版本v2.1, v2.1
                // 默认插件不能跨宿主版本，也就是说插件版本v1.1, v1.2只能在宿主版本v1上运行，而插件版本v2.1, v2.2只能在宿主版本v2上运行
                //若在发布宿主版本v2时，同时指定这个版本与宿主v1版本兼容，则插件版本v1.1, v1.2也可以在宿主版本v2上运行
                //此功能请谨慎使用，否则可能引起插件崩溃
                def compatibleWithHostVersion = fairy.compatibleWithHostVersion
                if(compatibleWithHostVersion != null) {
                    originManifestContent = manifestFile.getText('UTF-8')
                    def modifyedManifestContent = originManifestContent.replaceAll("fairy_compatibleWithHostVersion_NOT_SET", compatibleWithHostVersion.trim())
                    manifestFile.write(modifyedManifestContent, 'UTF-8')
                }
            }
        }

        tasks.findByName("process${varName.capitalize()}Resources").doFirst {
            File public_ids = file(getLayout().getBuildDirectory().getAsFile().get().absolutePath + "/outputs/public_ids.properties")
            if (!public_ids.exists()) {
                def packageName = android.defaultConfig.applicationId
                public_ids.write(
                        packageName + ":attr/public_static_final_host_attr_ = 0x7f010000\n" +
                        packageName + ":drawable/public_static_final_host_drawable_ = 0x7f320000\n" +
                        packageName + ":layout/public_static_final_host_layout_ = 0x7f330000\n" +
                        packageName + ":anim/public_static_final_host_anim_ = 0x7f340000\n" +
                        packageName + ":xml/public_static_final_host_xml_ = 0x7f350000\n" +
                        packageName + ":raw/public_static_final_host_raw_ = 0x7f360000\n" +
                        packageName + ":dimen/public_static_final_host_dimen_ = 0x7f370000\n" +
                        packageName + ":string/public_static_final_host_string_ = 0x7f380000\n" +
                        packageName + ":style/public_static_final_host_style_ = 0x7f390000\n" +
                        packageName + ":color/public_static_final_host_color_ = 0x7f3a0000\n" +
                        packageName + ":id/public_static_final_host_id_ = 0x7f3b0000\n" +
                        packageName + ":bool/public_static_final_host_bool_ = 0x7f3c0000\n" +
                        packageName + ":integer/public_static_final_host_int_ = 0x7f3d0000\n" +
                        packageName + ":array/public_static_final_host_array_ = 0x7f3e0000\n" +
                        packageName + ":menu/public_static_final_host_menu_ = 0x7f3f0000\n" +
                        packageName + ":mipmap/public_static_final_host_mipmap_ = 0x7f400000\n" +
                        packageName + ":animator/public_static_final_host_animator_ = 0x7f410000\n" +
                        packageName + ":fraction/public_static_final_host_fraction_ = 0x7f420000\n" +
                        packageName + ":font/public_static_final_host_font_ = 0x7f430000\n" +
                        packageName + ":plurals/public_static_final_host_plurals_ = 0x7f440000\n" +
                        packageName + ":interpolator/public_static_final_host_interpolator_ = 0x7f450000\n" +
                        packageName + ":transition/public_static_final_host_transition_ = 0x7f460000\n")
            }
        }

        tasks.findByName("process${varName.capitalize()}Resources").doLast {
            copy {
                from getLayout().getBuildDirectory().getAsFile().get().absolutePath + "/intermediates/stable_resource_ids_file/${varName}/process${varName.capitalize()}Resources/stableIds.txt"
                into getLayout().getBuildDirectory().getAsFile().get().absolutePath + "/outputs/"
                rename { "public_attrs.properties" }
                filter { String line ->
                    (line.contains(":attr/") || line.contains("public_static_final_host")) ? line : null
                }
            }

            //实际上最新版sdk和gradle可以直接指定apk了, 可以不使用.ap_文件
            //def processResFullName = baseVariant.apkData.fullName
            copy {
                println name + ' 编译宿主资源编译完成后导出后缀为.ap_的资源包，此资源包在编译非独立插件时需要此包'
                from linkedResourcesOutputDir
                include("*.ap_")
                into("${getLayout().getBuildDirectory().getAsFile().get()}/outputs/")
                // 可能有多种favor的ap_, 所以这里设置了重复策略
                duplicatesStrategy = DuplicatesStrategy.WARN
                rename(new Transformer<String, String>() {
                    @Override
                    String transform(String s) {
                        //多abi时会相互覆盖，不过对我们而言应该没什么影响
                        println "rename: " + s
                        return "resources.ap_"
                    }
                })
            }
        }

        tasks.findByName("bundle${varName.capitalize()}ClassesToCompileJar").doLast {
            copy {
                from(getLayout().getBuildDirectory().getAsFile().get().absolutePath + '/intermediates/compile_app_classes_jar/' + varName + "/" + name) {
                    include "classes.jar"
                }
                into(getLayout().getBuildDirectory().getAsFile().get().absolutePath + "/outputs")
                rename('classes', project.name + "-" + varName)
            }
        }
        tasks.findByName("compile${varName.capitalize()}JavaWithJavac").finalizedBy tasks.findByName("bundle${varName.capitalize()}ClassesToCompileJar")

        //将宿主的所有class，包括宿主的、和它所有依赖的类，合并起来打出一个jar来，供将来的非独立插件使用
        variant.javaCompileProvider.configure {
            it.doLast {
                println "Merge Jar After Task " + name + " buildType is " + buildTypeName + ", flavorName is " + flavorName +  ", varName is " + varName
                it.inputs.files.each { inputsFile->
                    //println "inputs: " + inputsFile
                }

                File jarFile = new File(getLayout().getBuildDirectory().getAsFile().get(), "outputs/host_classes.jar")
                if (jarFile.exists()) {
                    jarFile.delete()
                }

                JarMerger jarMerger = new JarMerger(jarFile)
                try {
                    jarMerger.setFilter(new JarFilter() {
                        public boolean checkEntry(String archivePath) throws JarFilter.ZipAbortException {
                            if (archivePath.endsWith(".class")) {
                                return true
                            }
                            return false
                        }
                    });

                    classpath.each { jarPath ->
                        if (jarPath.isDirectory()) {
                            println "adding folder " + jarPath
                            jarMerger.addFolder(jarPath);
                        } else if (jarPath.isFile()) {
                            println "adding jar " + jarPath
                            jarMerger.addJar(jarPath);
                        } else {
                            println "not exist, ignore: " + jarPath
                        }
                    }

                    File classes = new File(destinationDirectory.getAsFile().get().getParent(), "classes.jar");
                    classes.delete();

                    try {
                        ZipUtil.zip(destinationDirectory.getAsFile().get().absolutePath, destinationDirectory.getAsFile().get().getParent(), "classes.jar", new ArrayList<String>())
                    } catch(Exception e) {
                        throw new Exception("fail to create jar for app classes ")
                    }

                    if (classes.exists()) {
                        println "adding jar " + classes
                        jarMerger.addJar(classes)
                    } else {
                        throw new Exception("Not exists : classes file path is " + classes.absolutePath)
                    }

                } finally {
                    jarMerger.close()
                }

                println "Merge Jar Finished, Jar is at " + jarFile.absolutePath
            }
        }

        if (variant.buildType.minifyEnabled) {
            def proguardTask = project.tasks.findByName("minify${varName.capitalize()}WithR8")
            if (proguardTask != null) {
                proguardTask.doLast {
                    proguardTask.outputs.files.files.each { File file->
                        if (file.absolutePath.endsWith(proguardTask.name)) {
                            println "file outputs=>${file.absolutePath}"
                            copy {
                                from file.absolutePath
                                into("${project.buildDir}/outputs/minifyWithR8")
                            }
                        }
                    }
                }
            }
        }

        //将宿主编译产物作为基线包存档，这样可以使插件脱离宿主工程独立编译
        task "makeHostBaseLine${varName.capitalize()}"(type: Zip, dependsOn:"assemble${varName.capitalize()}") {
            archiveExtension = "bar" //Baseline Application Resource
            archiveBaseName = 'host'
            archiveVersion = android.defaultConfig.versionName
            archiveClassifier = "${varName.capitalize()}"
            from zipTree("${project.buildDir}/outputs/resources.ap_")
            from("${project.buildDir}/outputs") {
                exclude '*.ap_'
            }
            destinationDirectory = file("${project.buildDir}/distributions/")
        }

        //导出宿主最终的基线包
        tasks.findByName("assemble${varName.capitalize()}").finalizedBy "makeHostBaseLine${varName.capitalize()}"
    }

    if (gradle.startParameter.taskNames.find {
        println ">>>>>>执行命令: " + it
        it.startsWith("assemble") || it.startsWith("build")
    } != null) {
        //nothing
    }
}

def add(Set set, ResolvedDependencyResult dependencyResult, boolean childKept) {
    if (!(dependencyResult.getSelected().getId() instanceof DefaultProjectComponentIdentifier)) {//源码依赖的不处理
        String displayName = dependencyResult.getSelected().getId().displayName;
        String moduleIdentifier = dependencyResult.getSelected().getId().moduleIdentifier;
        String group = dependencyResult.getSelected().getId().group;
        String module = dependencyResult.getSelected().getId().module;
        String version = dependencyResult.getSelected().getId().version;
        if (!childKept && !fairy.shouldBeKept(moduleIdentifier)) {
            boolean succ = set.add("    all*.exclude group: '" + group + "', module: '" + module + "' //, version: '" + version + "'")
            if (succ) {
                dependencyResult.getSelected().getDependencies().each() { childDependencyResult->
                    if (childDependencyResult instanceof ResolvedDependencyResult) {
                        add(set, childDependencyResult, childKept)
                    }
                }
            }
        } else {
            boolean succ = set.add("    all { resolutionStrategy.force '" + displayName + "' }")
            if (succ) {
                dependencyResult.getSelected().getDependencies().each() { childDependencyResult->
                    if (childDependencyResult instanceof ResolvedDependencyResult) {
                        add(set, childDependencyResult, true)
                    }
                }
            }
        }
    } else {
        dependencyResult.getSelected().getDependencies().each() { childDependencyResult->
            if (childDependencyResult instanceof ResolvedDependencyResult) {
                add(set, childDependencyResult, childKept)
            }
        }
    }
}

//导出主题patch
def createThemePatch(String varName, String buildType, File patchDir) {

    def packageName = android.defaultConfig.applicationId
    if (android.buildTypes[buildType].applicationIdSuffix != null) {
        packageName = packageName + android.buildTypes[buildType].applicationIdSuffix;
    }

    String mergedResDir = "${project.buildDir}/intermediates/incremental/" + varName + "/merge" + varName.capitalize() + "Resources/merged.dir/"
    FileTree allxmlFiles = fileTree(dir: mergedResDir)
    allxmlFiles.include 'values/values*.xml',
                        'values-v1*/values-v1*.xml',
                        'values-v2*/values-v2*.xml',
                        'values-v3*/values-v3*.xml',
                        'values-*-v1*/values-*-v1*.xml',
                        'values-*-v2*/values-*-v2*.xml',
                        'values-*-v4/values-*-v4.xml',
                        'values-*-v8/values-*-v8.xml',
                        'values-land/values-land.xml'

    allxmlFiles.each { File itemFile ->
        def valuesDir = itemFile.getAbsolutePath().replace(itemFile.getParentFile().getParentFile().absolutePath, "").replace(itemFile.name, "")
        def destFile = new File(patchDir, 'res' + valuesDir + "patch_" + itemFile.name)
        destFile.getParentFile().mkdirs()
        println "export from " + itemFile + " to " + destFile
        ThemeProcessor.exportThemeStyle(itemFile, destFile, packageName)
    }
}

public class ThemeProcessor extends DefaultHandler {

    public static void exportThemeStyle(File srcFile, File destFile, String packageName) {
        try {
            SAXParser saxParser = SAXParserFactory.newInstance().newSAXParser();
            saxParser.parse(new FileInputStream(srcFile), new ThemeProcessor(destFile, packageName));
        } catch (ParserConfigurationException e) {
            System.out.println(e.getMessage());
        } catch (SAXException e) {
            System.out.println(e.getMessage());
        } catch (FileNotFoundException e) {
            System.out.println(e.getMessage());
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }

    }

    ////////////////
    ////////////////
    ////////////////

    File destFile;
    String packageName;
    Stack<Node> stack = new Stack<Node>();
    BufferedWriter outXmlStream = null;
    BufferedWriter outPublicAttrStream = null;

    HashSet<String> attrSets = new HashSet<>();

    HashSet<String> dupcate = new HashSet<>();

    public ThemeProcessor(File destFile, String packageName) {
        this.destFile = destFile;
        this.packageName = packageName;
    }

    public void startDocument() throws SAXException {
        try {
            outXmlStream = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(destFile), "UTF-8"));
            outXmlStream.write("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
            outXmlStream.write("\n<!-- AUTO-GENERATED FILE.  DO NOT MODIFY -->");
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {

        if (qName.equals("bool") || qName.equals("color") || qName.equals("dimen") || qName.equals("eat-comment")
                || qName.equals("integer") || qName.equals("string")
                || qName.equals("ns2:g") || qName.equals("ns1:g")
                || qName.equals("u")) {
            stack.add(new Node(attributes.getValue("name"), false, true));
            return;
        }

        boolean skip = false;
        if (!qName.equals("declare-styleable")) {
            String space = "\n";
            for (int i = 0; i < stack.size(); i++) {
                space = space + "    ";
            }
            String tag = space + "<" + qName;
            for (int i = 0; i < attributes.getLength(); i++) {
                tag = tag + " " + attributes.getQName(i) + "=\""+ attributes.getValue(i) + "\"";
            }
            tag = tag + ">";
            try {
                if (qName.equals("attr") && (attributes.getValue("name").startsWith("android:") || (attrSets.add(attributes.getValue("name"))?false:(dupcate.add(attributes.getValue("name"))?true:true)))
                        || (qName.equals("public") && (!attributes.getValue("type").equals("attr") || attributes.getValue("name").startsWith("public_static_final_")))) {
                    //skip
                    skip = true;
                } else {
                    if (qName.equals("enum")) {
                        if (!stack.empty()) {
                            Node top = stack.peek();
                            if (!dupcate.contains(top.name)) {
                                outXmlStream.write(tag);
                                if (qName.equals("attr") && outPublicAttrStream != null) {
                                    outPublicAttrStream.write(tag.replace("<attr", "<public type=\"attr\" ") + "</public>")
                                }
                            }
                        } else {
                            outXmlStream.write(tag);
                            if (qName.equals("attr") && outPublicAttrStream != null) {
                                outPublicAttrStream.write(tag.replace("<attr", "<public type=\"attr\" ") + "</public>")
                            }
                        }
                    } else {
                        outXmlStream.write(tag);
                        if (qName.equals("attr") && outPublicAttrStream != null) {
                            outPublicAttrStream.write(tag.replace("<attr", "<public type=\"attr\" ") + "</public>")
                        }
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        if (!stack.empty()) {
            Node top = stack.peek();
            top.hasChild = true;
        }
        stack.add(new Node(attributes.getValue("name"), false, skip));
    }

    public void endElement(String uri, String localName, String qName) throws SAXException {

        Node node = stack.pop();
        if (node.skip) {
            return;
        }

        if (!qName.equals("declare-styleable")) {
            String space = "";
            if (node.hasChild) {
                space = "\n";
                for (int i = 0; i < stack.size(); i++) {
                    space = space + "    ";
                }
            }
            try {
                if (!stack.empty()) {
                    Node parent = stack.peek();
                    if (qName.equals("enum") && dupcate.contains(parent.name)) {
                        //nothing
                    } else {
                        outXmlStream.write(space + "</" + qName + ">");
                    }
                } else {
                    outXmlStream.write(space + "</" + qName + ">");
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    }

    public void characters(char[] ch, int start, int length) throws SAXException {
        Node node = stack.peek();
        if (node.skip) {
            return;
        }

        String text = new String(ch, start, length);
        text = text.replaceAll("[\n ]", "");
        if (text.length() > 0) {
            try {
                if (text.startsWith("@color")) {
                    text = text.replace("@color", "@*" + packageName +":color");

                } else if (text.startsWith("@dimen")) {
                    text = text.replace("@dimen", "@*" + packageName +":dimen");

                } else if (text.startsWith("@string")) {
                    text = text.replace("@string", "@*" + packageName +":string");

                } else if (text.startsWith("@bool")) {
                    text = text.replace("@bool", "@*" + packageName +":bool");

                } else if (text.startsWith("@integer")) {
                    text = text.replace("@integer", "@*" + packageName +":integer");

                } else if (text.startsWith("@layout")) {
                    text = text.replace("@layout", "@*" + packageName +":layout");

                } else if (text.startsWith("@anim")) {
                    text = text.replace("@anim", "@*" + packageName +":anim");

                } else if (text.startsWith("@id")) {
                    text = text.replace("@id", "@*" + packageName +":id");

                } else if (text.startsWith("@drawable")) {
                    text = text.replace("@drawable", "@*" + packageName +":drawable");

                    //} else if (text.startsWith("?attr")) {
                    //    text = text.replace("?attr", "?*" + packageName +":attr");
                } else if (text.startsWith("@mipmap")) {
                    text = text.replace("@mipmap", "@*" + packageName +":mipmap");
                } else if (text.startsWith("@style")) {
                    if (node.name.equals("android:windowAnimationStyle")) {
                        text = text.replace("@style", "@*" + packageName +":style");
                    }
                }

                outXmlStream.write(text);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public void endDocument() throws SAXException {
        try {
            outXmlStream.flush();
            outXmlStream.close();

            if (outPublicAttrStream != null) {
                outPublicAttrStream.write("\n</resources>");
                outPublicAttrStream.flush();
                outPublicAttrStream.close();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static class Node {
        String name = null;
        boolean hasChild = false;
        boolean skip = false;

        public Node(String name, boolean hasChild, boolean skip) {
            this.name = name;
            this.hasChild = hasChild;
            this.skip = skip;
        }
    }

}

public class JarMerger {
    private final byte[] buffer = new byte[8192];
    private final File jarFile;
    private FileOutputStream fos;
    private JarOutputStream jarOutputStream;

    private JarFilter filter;

    public JarMerger(File jarFile) throws IOException {
        this.jarFile = jarFile;
    }

    private void init() throws IOException {
        if(this.fos == null && this.jarOutputStream == null) {
            if(!this.jarFile.getParentFile().mkdirs() && !this.jarFile.getParentFile().exists()) {
                throw new RuntimeException("Cannot create directory " + this.jarFile.getParentFile());
            }
            this.fos = new FileOutputStream(this.jarFile);
            this.jarOutputStream = new JarOutputStream(fos);
        }
    }

    public void setFilter(JarFilter filter) {
        this.filter = filter;
    }

    public void addFolder(File folder) throws IOException {
        this.init();

        try {
            this.addFolderInternal(folder, "");
        } catch (JarFilter.ZipAbortException var3) {
            throw new IOException(var3);
        }
    }

    private void addFolderInternal(File folder, String path) throws IOException, JarFilter.ZipAbortException {
        File[] files = folder.listFiles();
        if(files != null) {
            File[] arr$ = files;
            int len$ = files.length;

            for(int i$ = 0; i$ < len$; ++i$) {
                File file = arr$[i$];
                if(!file.isFile()) {
                    if(file.isDirectory()) {
                        this.addFolderInternal(file, path + file.getName() + "/");
                    }
                } else {
                    String entryPath = path + file.getName();
                    if(this.filter == null || this.filter.checkEntry(entryPath)) {
                        this.jarOutputStream.putNextEntry(new JarEntry(entryPath));
                        FileInputStream fis = null;
                        try {
                            fis = new FileInputStream(file);

                            int count;
                            while((count = fis.read(this.buffer)) != -1) {
                                this.jarOutputStream.write(this.buffer, 0, count);
                            }
                        } finally {
                            if (fis != null) {
                                fis.close();
                                fis = null;
                            }
                        }

                        this.jarOutputStream.closeEntry();
                    }
                }
            }
        }

    }

    public void addJar(File file) throws IOException {
        this.addJar(file, false);
    }

    public void addJar(File file, boolean removeEntryTimestamp) throws IOException {
        this.init();

        FileInputStream e = null;
        ZipInputStream zis = null;
        try {
            e = new FileInputStream(file);
            zis = new ZipInputStream(e);

            ZipEntry entry;
            while((entry = zis.getNextEntry()) != null) {
                if(!entry.isDirectory()) {
                    String name = entry.getName();
                    if(this.filter == null || this.filter.checkEntry(name)) {
                        JarEntry newEntry;
                        if(entry.getMethod() == ZipEntry.STORED) {
                            newEntry = new JarEntry(entry);
                        } else {
                            newEntry = new JarEntry(name);
                        }

                        if(removeEntryTimestamp) {
                            newEntry.setTime(0L);
                        }
                        try {
                            this.jarOutputStream.putNextEntry(newEntry);
                        } catch(Exception duplicate){
                            //类重复了，先忽略吧
                            println "addJar putNextEntry fail(duplicate): " + name
                            continue;
                        }
                        int count;
                        while((count = zis.read(this.buffer)) != -1) {
                            this.jarOutputStream.write(this.buffer, 0, count);
                        }

                        this.jarOutputStream.closeEntry();
                        zis.closeEntry();
                    }
                }
            }
        } catch (JarFilter.ZipAbortException var13) {
            throw new IOException(var13);
        } finally {
            if (zis != null) {
                zis.close();
            }
            if (e != null) {
                e.close();
            }
        }

    }

    public void addEntry(String path, byte[] bytes) throws IOException {
        this.init();
        this.jarOutputStream.putNextEntry(new JarEntry(path));
        this.jarOutputStream.write(bytes);
        this.jarOutputStream.closeEntry();
    }

    public void close() throws IOException {
        if (this.jarOutputStream != null) {
            jarOutputStream.close();
            jarOutputStream = null;
        }
        if (this.fos != null) {
            fos.close();
            fos = null;
        }

    }
}

public interface JarFilter {
    boolean checkEntry(String var1) throws ZipAbortException;

    public static class ZipAbortException extends Exception {
        private static final long serialVersionUID = 1L;

        public ZipAbortException() {
        }

        public ZipAbortException(String format, Object... args) {
            super(String.format(format, args));
        }

        public ZipAbortException(Throwable cause, String format, Object... args) {
            super(String.format(format, args), cause);
        }

        public ZipAbortException(Throwable cause) {
            super(cause);
        }
    }
}

public class ZipUtil {

    public static List<String> unZip(String path, String savepath) throws IOException
    {
        def resultList = new ArrayList<String>();
        def count = -1;
        def index = -1;
        def flag = false;
        def file = null;
        def is = null;
        def fos = null;
        def bos = null;

        ZipFile zipFile = new ZipFile(path);
        Enumeration<?> entries = zipFile.entries();

        while(entries.hasMoreElements())
        {
            def buf = new byte[2048];
            ZipEntry entry = (ZipEntry)entries.nextElement();

            def filename = savepath + entry.getName();

            File folder = new File(filename).getParentFile();
            if(!folder.exists()){
                folder.mkdirs();
            }

            if(!filename.endsWith(File.separator)){

                System.out.println("解压：" + filename);

                file = new File(filename);
                file.createNewFile();
                is = zipFile.getInputStream(entry);
                fos = new FileOutputStream(file);
                bos = new BufferedOutputStream(fos, 2048);

                while((count = is.read(buf)) > -1)
                {
                    bos.write(buf, 0, count );
                }

                bos.flush();

                fos.close();
                is.close();

                resultList.add(entry.getName());
            }
        }

        zipFile.close();

        return resultList
    }

    /**
     * 递归压缩文件夹
     * @param srcRootDir 压缩文件夹根目录的子路径
     * @param file 当前递归压缩的文件或目录对象
     * @param zos 压缩文件存储对象
     * @throws Exception
     */
    public static zip(String srcRootDir, File file, ZipOutputStream zos, ArrayList<String> filter) throws Exception
    {
        if (file == null)
        {
            return;
        }

        //如果是文件，则直接压缩该文件
        if (file.isFile())
        {
            int count, bufferLen = 1024;
            byte[] data = new byte[bufferLen];

            //获取文件相对于压缩文件夹根目录的子路径
            String subPath = file.getAbsolutePath();
            int index = subPath.indexOf(srcRootDir);
            if (index != -1)
            {
                subPath = subPath.substring(srcRootDir.length() + File.separator.length());
            }

            if (filter.contains(subPath)) {
                System.out.println("过滤：" + subPath)
                return;
            } else {
                System.out.println("压缩：" + subPath)
            }

            ZipEntry entry = new ZipEntry(subPath);
            zos.putNextEntry(entry);
            BufferedInputStream bis = new BufferedInputStream(new FileInputStream(file));
            while ((count = bis.read(data, 0, bufferLen)) != -1)
            {
                zos.write(data, 0, count);
            }
            bis.close();
            zos.closeEntry();
        }
        //如果是目录，则压缩整个目录
        else
        {
            //压缩目录中的文件或子目录
            File[] childFileList = file.listFiles();
            for (int n=0; n<childFileList.length; n++)
            {
                childFileList[n].getAbsolutePath().indexOf(file.getAbsolutePath());
                zip(srcRootDir, childFileList[n], zos, filter);
            }
        }
    }

    /**
     * 对文件或文件目录进行压缩
     * @param srcPath 要压缩的源文件路径。如果压缩一个文件，则为该文件的全路径；如果压缩一个目录，则为该目录的顶层目录路径
     * @param zipPath 压缩文件保存的路径。注意：zipPath不能是srcPath路径下的子文件夹
     * @param zipFileName 压缩文件名
     * @throws Exception
     */
    public static zip(String srcPath, String zipPath, String zipFileName, ArrayList<String> filter) throws Exception
    {
        CheckedOutputStream cos = null;
        ZipOutputStream zos = null;
        try
        {
            File srcFile = new File(srcPath);

            //判断压缩文件保存的路径是否存在，如果不存在，则创建目录
            File zipDir = new File(zipPath);
            if (!zipDir.exists() || !zipDir.isDirectory())
            {
                zipDir.mkdirs();
            }

            //创建压缩文件保存的文件对象
            String zipFilePath = zipPath + File.separator + zipFileName;
            File zipFile = new File(zipFilePath);
            if (zipFile.exists())
            {
                ///删除已存在的目标文件
                boolean success = zipFile.delete();
                System.out.println("删除已存在的目标文件:" + success)

            }

            cos = new CheckedOutputStream(new FileOutputStream(zipFile), new CRC32());
            zos = new ZipOutputStream(cos);

            //如果只是压缩一个文件，则需要截取该文件的父目录
            String srcRootDir = srcPath;
            if (srcFile.isFile())
            {
                int index = srcPath.lastIndexOf(File.separator);
                if (index != -1)
                {
                    srcRootDir = srcPath.substring(0, index);
                }
            }
            //调用递归压缩方法进行目录或文件压缩
            zip(srcRootDir, srcFile, zos, filter);
            zos.flush();
        }
        catch (Exception e)
        {
            throw e;
        }
        finally
        {
            try
            {
                if (zos != null)
                {
                    zos.close();
                }
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
        }
    }
}
