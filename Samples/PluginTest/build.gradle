apply plugin: 'com.android.application'

//A const defined in the top-level build.gradle file
apply from: PLUGIN_FAIRY_SCRIPT

android {
    compileSdkVersion COMPILE_SDK_VERSION
    buildToolsVersion BUILD_TOOLS_VERSION
    ndkVersion = NDK_VERSION

    namespace = 'com.example.plugintest'

    useLibrary 'org.apache.http.legacy'

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    defaultConfig {
        applicationId "com.example.plugintest"
        minSdkVersion MIN_SDK_VERSION
        targetSdkVersion TARGET_SDK_VERSION
        versionCode 1
        versionName "1.0.1"
        flavorDimensions "versionCode"
        multiDexEnabled = true
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }

    viewBinding {
        enabled = false
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version = CMAKE_VERSION
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        tasks.lint.enabled = false
        checkReleaseBuilds = false
        abortOnError = false
        textReport = false
        htmlReport = false
        xmlReport = false
    }

    signingConfigs {
        debug {
            storeFile file("../PluginMain/limpoxe.keystore")
            storePassword "123456"
            keyAlias "limpoxe"
            keyPassword "123456"
        }

        release {
            storeFile file("../PluginMain/limpoxe.keystore")
            storePassword "123456"
            keyAlias "limpoxe"
            keyPassword "123456"
        }
    }

    buildTypes {
        debug {
            versionNameSuffix '_' + getDate()
            debuggable true
            signingConfig = signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            versionNameSuffix '_' + getDate()
            debuggable true
            signingConfig = signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //测试框架脚本是否支持Flavor配置
    productFlavors {
        f1 {
            //
        }

        f2 {
            //
        }
    }

//    dataBinding {
//        enabled = true
//    }
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy_MM_dd_HH_mm_ss')
    return formattedDate
}

def hostbarName = project(':Samples:PluginMain').android.defaultConfig.versionName

dependencies {

    api project(":Samples:plugintest3");
    //demo宿主里面没有添加multidex这个库，所以插件要开multidex需要在插件中加这个依赖
    implementation 'androidx.multidex:multidex:2.0.0'

    //////////////////////////////////////////////////////////////////////
    //下面这一堆provided的配置，是因为这些包在编译宿主的时候，已经被打包到宿主的apk中。
    //所以这里打包非独立插件的时候，要通过provided配置防止这些包被打入非独立插件。
    //如果是独立插件，无需任何特殊配置
    /////////////////////////////////////////////////////////////////////

    debugCompileOnly files(project(':Samples:PluginTesBase').getBuildDir().absolutePath + '/outputs/PluginTesBase-f1Debug.jar')
    releaseCompileOnly files(project(':Samples:PluginTesBase').getBuildDir().absolutePath + '/outputs/PluginTesBase-f1Release.jar')

    //支持使用maven坐标配置
    //baselinePatch 'xxx:xxx:xxx@xx'
    debugBaselinePatch files(project(':Samples:PluginMain').getBuildDir().absolutePath + "/distributions/host-${hostbarName}-F1Debug.bar")
    releaseBaselinePatch files(project(':Samples:PluginMain').getBuildDir().absolutePath + "/distributions/host-${hostbarName}-F1Release.bar")

}


//afterEvaluate {
//    tasks.getByName("packageDebug").doLast {
//        copy {
//            println "复制插件" + apkPathList.get(0).absolutePath + "到宿主assets目录"
//            from apkPathList.get(0).getParent()
//            include project.name + '-debug.apk'
//            into(project(':Samples:PluginMain').getProjectDir().absolutePath + '/src/main/assets/')
//        }
//    }
//}
