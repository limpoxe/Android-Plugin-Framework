apply plugin: 'com.android.application'

//A const defined in the top-level build.gradle file
apply from: HOST_FAIRY_SCRIPT

apply from: 'vcs.gradle'

configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor(1, 'HOURS')
    }
}

repositories {
    maven { url = 'https://maven.aliyun.com/repository/google' }
}

android {

    compileSdkVersion COMPILE_SDK_VERSION
    buildToolsVersion BUILD_TOOLS_VERSION
    ndkVersion = NDK_VERSION

    namespace = 'com.example.pluginmain'

    useLibrary 'org.apache.http.legacy'

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    defaultConfig {
        applicationId "com.example.pluginmain"
        minSdkVersion MIN_SDK_VERSION
        targetSdkVersion TARGET_SDK_VERSION
        versionCode 6
        versionName "1.2.0_" + project.ext.VCS_commitId
        flavorDimensions "versionCode"

        ndk {
            //和splits.abi不能共存
            //abiFilters "armeabi-v7a", "x86"
        }
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }

    viewBinding {
        enabled = false
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version = CMAKE_VERSION
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        tasks.lint.enabled = false
        checkReleaseBuilds = false
        abortOnError = false
        textReport = false
        htmlReport = false
        xmlReport = false
    }

    signingConfigs {
        debug {
            storeFile file("limpoxe.keystore")
            storePassword "123456"
            keyAlias "limpoxe"
            keyPassword "123456"
        }

        release {
            storeFile file("limpoxe.keystore")
            storePassword "123456"
            keyAlias "limpoxe"
            keyPassword "123456"
        }
    }

    buildFeatures {
        buildConfig = true
    }

    buildTypes {
        debug {
            debuggable true
            signingConfig = signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            debuggable true
            signingConfig = signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        //如果增加自定义的buildtype，需要所有依赖的子项目都增加相同名称的定义
        //否则需要显式指定子项目的依赖方式，如debugImplementation
        //或者配置fallback策略
        preview {
            initWith debug
            matchingFallbacks = ['debug']
        }

    }

    splits {
        abi {
            enable = true
            reset()
            include 'armeabi-v7a', "arm64-v8a", "x86"//select ABIs to build APKs for
            //universalApk true //generate an additional APK that contains all the ABIs
        }
    }
    
    //测试框架脚本是否支持Flavor配置
    productFlavors {
        f1 {
            //
        }

        f2 {
            //
        }
    }
}

dependencies {
    //implementation('com.github.limpoxe:Android-Plugin-Framework:latest.release@aar')//通过后缀@aar来中断依赖传递
    implementation project(':FairyPlugin')
    //optional
    //compile('com.limpoxe.support:android-servicemanager:1.0.5@aar')

    //配置内置插件，宿主编译时会将这些插件打包到自己到assets目录下面
    //注意编译顺序：
    //1、先编译宿主，产出2个文件：宿主bar文件，宿主apk
    //2、再编译插件，编译插件时依赖宿主的bar文件
    //3、再重新编译宿主，依赖第二步编译出来的插件，目的是将插件内置到宿主中，
    //   如果宿主发布时不需要内置插件，不需要第3步。
    //支持坐标依赖
    //innerPlugin 'xxx:xxx:xxx@apk'
    innerPlugin files(project(':Samples:PluginTest').getBuildDir().absolutePath + '/outputs/apk/f1/debug/PluginTest-f1-debug.apk')
    innerPlugin files(project(':Samples:admobdemo').getBuildDir().absolutePath + '/outputs/apk/f1/debug/admobdemo-f1-debug.apk')
    innerPlugin files(project(':Samples:baidumapsdk').getBuildDir().absolutePath + '/outputs/apk/f1/debug/baidumapsdk-f1-debug.apk')
    innerPlugin files(project(':Samples:PluginHelloWorld').getBuildDir().absolutePath + '/outputs/apk/f1/debug/PluginHelloWorld-f1-debug.apk')
    innerPlugin files(project(':Samples:PluginTesBase').getBuildDir().absolutePath + '/outputs/apk/f1/debug/PluginTesBase-f1-debug.apk')
    innerPlugin files(project(':Samples:PluginTest2').getBuildDir().absolutePath + '/outputs/apk/f1/debug/PluginTest2-f1-debug.apk')
    innerPlugin files(project(':Samples:wxsdklibrary').getBuildDir().absolutePath + '/outputs/apk/f1/debug/wxsdklibrary-f1-debug.apk')

    implementation project(':Samples:PluginShareLib')

    implementation "com.google.android.material:material:${MATERIAL_VERSION}"
    implementation "androidx.appcompat:appcompat:${APPCOMPAT_VERSION}"
    implementation "androidx.fragment:fragment:1.4.1"
    implementation "androidx.navigation:navigation-fragment:2.4.2"
    implementation "androidx.navigation:navigation-ui:2.4.2"
    implementation "androidx.recyclerview:recyclerview:1.2.1"
    implementation "androidx.startup:startup-runtime:1.1.1"
    implementation "androidx.room:room-runtime:2.4.2"
    annotationProcessor 'androidx.room:room-compiler:2.4.2'

    implementation 'com.tencent.bugly:crashreport:2.1.5'
    //implementation 'com.umeng.analytics:analytics:latest.integration'

    implementation 'org.greenrobot:eventbus:3.2.0'

}

fairy {
    //可选配置，用于指定插件进程名。
    //不设置即使用默认的独立进程(:plugin)
    //设置为空串或者null即是和宿主同进程
    //pluginProcess = ":plugin"

    //指定当前宿主版本与哪些历史宿主版本兼容, 用于指定插件版本跨宿主版本。默认是自己与自己兼容，也即插件不能跨宿主版本
    //例如：
    // 宿主版本v1，插件版本v1.1, v1.2
    // 宿主版本v2，插件版本v2.1, v2.1
    // 默认插件不能跨宿主版本，也就是说插件版本v1.1, v1.2只能在宿主版本v1上运行，而插件版本v2.1, v2.2只能在宿主版本v2上运行
    //若在发布宿主版本v2时，同时指定这个版本与宿主v1版本兼容，则插件版本v1.1, v1.2也可以在宿主版本v2上运行
    //此功能请谨慎使用，否则可能引起插件崩溃
    //compatibleWithHostVersion = "1.2.0,1.2.1"
}

afterEvaluate {
    for (variant in android.applicationVariants) {
        def varName = variant.name;
        def varDirName =  variant.dirName
        def mergeProjectDexTask = tasks.findByName("mergeProjectDex${varName.capitalize()}")
        if (mergeProjectDexTask != null) {
            mergeProjectDexTask.doLast {
                mergeProjectDexTask.outputs.files.each { it1->
                    fileTree(it1).each { it2->
                        println 'dex::' + it2
                    }
                }
            }
        }
        def mergeDexTask = tasks.findByName("mergeDex${varName.capitalize()}")
        if (mergeDexTask != null) {
            mergeDexTask.doLast {
                mergeDexTask.outputs.files.each { it1->
                    fileTree(it1).each { it2->
                        println 'dex::' + it2
                    }
                }
            }
        }
        def mergeResourceTask = tasks.findByName("merge${varName.capitalize()}Resources")
        if (mergeResourceTask != null) {
            mergeResourceTask.doFirst {
                //variant.allRawAndroidResources.files.each { it1->
                //mergeResourceTask.sourceFolderInputs.each { it1->
                //mergeResourceTask.rawLocalResourcesProcessRes.each { it1->
                //mergeResourceTask.sourceSetInputs.librarySourceSets.each { it1->
                //mergeResourceTask.sourceSetInputs.resourceSourceSets.each { it1->
                //}
            }
        }
    }
}
