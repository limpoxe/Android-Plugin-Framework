apply plugin: 'com.android.application'

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    aaptOptions {
        additionalParameters '-I', "../PluginMain/build/intermediates/res/resources-debug.ap_"
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    defaultConfig {
        applicationId "com.example.plugintest"
        minSdkVersion 11
        targetSdkVersion 22
        versionCode 1
        versionName "1.0.1"
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src', 'src/main/aidl', 'aidl/']
            jniLibs.srcDirs = ['libs']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    buildTypes {
        release {
            //表示插件的id分组为0x3f, 必须设置为0x1f到0x7f之间，不可超出这个范围
            versionNameSuffix '_' + getDate() + '_0x3f'
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            //表示插件的id分组为0x3f, 必须设置为0x1f到0x7f之间，不可超出这个范围
            versionNameSuffix '_' + getDate() + '_0x3f'
        }
    }

}

dependencies {

    compile fileTree(dir: 'libs', include: ['*.jar'])

    //依赖库的src
    provided files(project(':PluginCore').getBuildDir().absolutePath + '/intermediates/bundles/release/classes.jar')
    //依赖库的R
    provided files(project(':PluginShareLib').getBuildDir().absolutePath + '/outputs/rClasses.jar')
    //依赖库的src
    provided files(project(':PluginShareLib').getBuildDir().absolutePath + '/intermediates/bundles/release/classes.jar')
    //依赖库的依赖裤
    provided files(project(':PluginShareLib').getBuildDir().absolutePath + '/intermediates/bundles/release/libs/android-support-v4.jar')

    //如果插件需要依赖一些私有库，可放开下面的注释，并修改为私有库的名称
    //compile project(':PluginPrivateLib1')
    //compile project(':PluginPrivateLib2')
    //compile file('xxx/xxx.jar');
}

build.doLast {
    //将编译好的插件apk复制到Main工程的assets目录下
    copy {
        println 'copy plugin apk to assets... ' + buildDir.absolutePath + '/outputs/apk/PluginTest-debug.apk'
        from(buildDir.absolutePath + '/outputs/apk/') {
            include 'PluginTest-debug.apk'
        }
        into(project(':PluginMain').getProjectDir().absolutePath + '/assets/')
    }
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}
